**High-Level Block Diagram of a Call Stack**

```
|-------------------|
|   Return Address  |
|-------------------|
|   Saved Registers |
|-------------------|
|   Local Variables |
|-------------------|
| Function Arguments|
|-------------------|
```

**Theory of Operation**

1. **Passing Parameters**: When a C program calls an assembly language routine, the parameters are typically passed on the stack. 
The C program pushes the arguments onto the stack in reverse order (right to left), so the first argument is at the top of the stack when the assembly routine starts executing.

2. **Returning a Value**: The return value from an assembly language routine is typically passed back to the C program in a register.
The specific register used can vary depending on the system architecture, but it's often the `eax` register for 32-bit systems and the `rax` register for 64-bit systems.

3. **Returning to the Calling Program**: After the assembly language routine has finished executing, it needs to return control to the calling C program. 
This is typically done by popping the return address off the stack and jumping to that address. The `ret` instruction in assembly language handles this.

4. **Cleaning Up the Stack**: After the assembly language routine has returned, the C program needs to clean up the stack. 
This involves popping off the arguments that were passed to the assembly routine. If the C program is using the `cdecl` calling convention, it's responsible for 
cleaning up the stack. If it's using the `stdcall` calling convention, the assembly routine is responsible for cleaning up the stack.

This is a simplified explanation and the exact details can vary depending on the system architecture and the specific calling convention being used. 
However, this should give you a good high-level understanding of how a C program manages the call stack when calling an assembly language routine. 
